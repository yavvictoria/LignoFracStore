# EXTRACTING DESCRIPTIVE INFORMATION ABOUT THE DATABASE

library(readxl)
library(rio)
library(bibliometrix)
library(openxlsx)
library(stringr)
library(plyr)

my_data <- read_excel(file.choose())

results <- biblioAnalysis(my_data, sep = ";")

S <- summary(object = results, k = 10, pause = FALSE)

local_citations<-localCitations(my_data, T)
write.xlsx(local_citations[["Papers"]], file = "/Users/yavvictoria/Documents/JIMiSD/MA THESIS TIS/Scopus database/May 13/refinery/VERSIONS OF DB/December 19/for clearing references/local_citations_papers.xlsx", rowNames=T)

export (my_data, "cleaned up.xlsx")

# LOOK INTO THE FUNCTION biblioAnalysis

function (M, sep = ";") 
{
    Authors = NULL
    Authors_frac = NULL
    FirstAuthors = NULL
    PY = NULL
    FAffiliation = NULL
    Affiliation = NULL
    Affiliation_frac = NULL
    CO = rep(NA, dim(M)[1])
    TC = NULL
    TCperYear = NULL
    SO = NULL
    Country = NULL
    DE = NULL
    ID = NULL
    MostCitedPapers = NULL
    Tags <- names(M)
    if (!("SR" %in% Tags)) {
        M = metaTagExtraction(M, "SR")
    }
    if ("AU" %in% Tags) {
        listAU = strsplit(as.character(M$AU), sep)
        listAU = lapply(listAU, function(l) trim(l))
        nAU <- lengths(listAU)
        fracAU <- rep(1/nAU, nAU)
        AU = unlist(listAU)
        Authors = sort(table(AU), decreasing = TRUE)
        Authors_frac = aggregate(fracAU, by = list(AU), "sum")
        names(Authors_frac) = c("Author", "Frequency")
        Authors_frac = Authors_frac[order(-Authors_frac$Frequency), 
            ]
        FirstAuthors = unlist(lapply(listAU, function(l) {
            if (length(l) > 0) {
                l = l[[1]]
            }
            else {
                l = NA
            }
            return(l)
        }))
        AuSingleAuthoredArt = length(unique(FirstAuthors[nAU == 
            1]))
        AuMultiAuthoredArt = length(Authors) - AuSingleAuthoredArt
    }
    
    if ("TC" %in% Tags) {
        TC = as.numeric(M$TC)
        # here, they get information from the same exact column, but we're getting completely different numbers when it comes to countries
        # how do they identify countries? 
        
        PY = as.numeric(M$PY)
        CurrentYear = as.numeric(format(Sys.Date(), "%Y"))
        TCperYear = TC/(CurrentYear - PY + 1)
        # could this be a problem? our analysis is limited to 2021, here they current year would be different, no?
        
        if (!("DI" %in% names(M))) 
            M$DI <- ""
        MostCitedPapers <- data.frame(M$SR, M$DI, TC, TCperYear, 
            PY) %>% group_by(.data$PY) %>% mutate(NTC = .data$TC/mean(.data$TC)) %>% 
            ungroup() %>% select(-.data$PY) %>% arrange(desc(.data$TC)) %>% 
            as.data.frame()
        names(MostCitedPapers) = c("Paper         ", "DOI", "TC", 
            "TCperYear", "NTC")
    }
    nReferences <- 0
    if ("CR" %in% Tags) {
        CR <- tableTag(M, "CR", sep)
        nReferences <- length(CR)
    }
    if ("ID" %in% Tags) {
        ID <- tableTag(M, "ID", sep)
    }
    if ("DE" %in% Tags) {
        DE = tableTag(M, "DE", sep)
    }
    if ("SO" %in% Tags) {
        SO = gsub(",", "", M$SO, fixed = TRUE)
        SO = sort(table(SO), decreasing = TRUE)
    }
    if (("C1" %in% Tags) & (sum(!is.na(M$C1)) > 0)) {
        if (!("AU_UN" %in% Tags)) {
            M = metaTagExtraction(M, Field = "AU_UN")
        }
        # C1 is located in author's address
        # the function looks for country names in affiliations for scientific production and SCP/MCP analysis but the results are different
        
        AFF = M$AU_UN
        listAFF = strsplit(AFF, sep, fixed = TRUE)
        nAFF = unlist(lapply(listAFF, length))
        listAFF[nAFF == 0] = "NA"
        fracAFF = unlist(sapply(nAFF, function(x) {
            if (x > 0) {
                x = rep(1/x, x)
            }
            else {
                x = 0
            }
            # am I correct to say that when an affiliation was mentioned more than once for one paper, all the repetitions are counted?
            
        }))
        AFF = trim.leading(unlist(listAFF))
        Affiliation = sort(table(AFF), decreasing = TRUE)
        Affiliation_frac = aggregate(fracAFF, by = list(AFF), 
            "sum")
        names(Affiliation_frac) = c("Affiliation", "Frequency")
        Affiliation_frac = Affiliation_frac[order(-Affiliation_frac$Frequency), 
            ]
        FAffiliation = lapply(listAFF, function(l) l[1])
        data("countries", envir = environment())
        countries = as.character(countries[[1]])
        if (!("AU1_CO" %in% names(M))) {
            M = metaTagExtraction(M, Field = "AU1_CO", sep)
        }
        CO = M$AU1_CO
        # The first author mentioned in this column is considered as a corresponding author
        # so the analysis should be done for all papers which mentioned authors’ addresses 
        
        Country = tableTag(M, "AU1_CO")
        SCP_MCP = countryCollaboration(M, Country, k = length(Country), 
            sep)
    }
    else {
        M$AU1_CO = NA
        SCP_MCP = data.frame(Country = rep(NA, 1), SCP = rep(NA, 
            1))
    }
    if ("DT" %in% names(M)) {
        Documents = table(M$DT)
        n = max(nchar(names(Documents)))
        names(Documents) = substr(paste(names(Documents), "                                              ", 
            sep = ""), 1, n + 5)
    }
    else {
        Documents = NA
    }
    results = list(Articles = dim(M)[1], Authors = Authors, AuthorsFrac = Authors_frac, 
        FirstAuthors = FirstAuthors, nAUperPaper = nAU, Appearances = sum(nAU), 
        nAuthors = dim(Authors), AuMultiAuthoredArt = AuMultiAuthoredArt, 
        AuSingleAuthoredArt = AuSingleAuthoredArt, MostCitedPapers = MostCitedPapers, 
        Years = PY, FirstAffiliation = unlist(FAffiliation), 
        Affiliations = Affiliation, Aff_frac = Affiliation_frac, 
        CO = CO, Countries = Country, CountryCollaboration = SCP_MCP, 
        TotalCitation = TC, TCperYear = TCperYear, Sources = SO, 
        DE = DE, ID = ID, Documents = Documents, nReferences = nReferences, 
        DB = M$DB[1])
    class(results) <- "bibliometrix"
    return(results)
}

# LOOK INTO FUNCTION biblioNetwork

function (M, analysis = "coupling", network = "authors", n = NULL, 
    sep = ";", short = FALSE, shortlabel = TRUE, remove.terms = NULL, 
    synonyms = NULL) 
{
    crossprod <- Matrix::crossprod
    NetMatrix <- NA
    if (analysis == "coupling") {
        switch(network, authors = {
            WA <- cocMatrix(M, Field = "AU", type = "sparse", 
                n, sep, short = short)
            WCR <- cocMatrix(M, Field = "CR", type = "sparse", 
                n, sep, short = short)
            CRA <- crossprod(WCR, WA)
            NetMatrix <- crossprod(CRA, CRA)
        }, references = {
            WCR <- Matrix::t(cocMatrix(M, Field = "CR", type = "sparse", 
                n, sep, short = short))
            NetMatrix <- crossprod(WCR, WCR)
        }, sources = {
            WSO <- cocMatrix(M, Field = "SO", type = "sparse", 
                n, sep, short = short)
            WCR <- cocMatrix(M, Field = "CR", type = "sparse", 
                n, sep, short = short)
            CRSO <- crossprod(WCR, WSO)
            NetMatrix <- crossprod(CRSO, CRSO)
        }, countries = {
            WCO <- cocMatrix(M, Field = "AU_CO", type = "sparse", 
                n, sep, short = short)
            WCR <- cocMatrix(M, Field = "CR", type = "sparse", 
                n, sep, short = short)
            CRCO <- crossprod(WCR, WCO)
            NetMatrix <- crossprod(CRCO, CRCO)
        })
    }
    if (analysis == "co-occurrences") {
        switch(network, authors = {
            WA <- cocMatrix(M, Field = "AU", type = "sparse", 
                n, sep, short = short)
        }, keywords = {
            WA <- cocMatrix(M, Field = "ID", type = "sparse", 
                n, sep, short = short, remove.terms = remove.terms, 
                synonyms = synonyms)
        }, author_keywords = {
            WA <- cocMatrix(M, Field = "DE", type = "sparse", 
                n, sep, short = short, remove.terms = remove.terms, 
                synonyms = synonyms)
        }, titles = {
            WA <- cocMatrix(M, Field = "TI_TM", type = "sparse", 
                n, sep, short = short, remove.terms = remove.terms, 
                synonyms = synonyms)
        }, abstracts = {
            WA <- cocMatrix(M, Field = "AB_TM", type = "sparse", 
                n, sep, short = short, remove.terms = remove.terms, 
                synonyms = synonyms)
        }, sources = {
            WA <- cocMatrix(M, Field = "SO", type = "sparse", 
                n, sep, short = short)
        })
        NetMatrix <- crossprod(WA, WA)
    }
    if (analysis == "co-citation") {
        switch(network, authors = {
            WA <- cocMatrix(M, Field = "CR_AU", type = "sparse", 
                n, sep, short = short)
        }, references = {
            WA <- cocMatrix(M, Field = "CR", type = "sparse", 
                n, sep, short = short)
        }, sources = {
            WA <- cocMatrix(M, Field = "CR_SO", type = "sparse", 
                n, sep, short = short)
        })
        NetMatrix <- crossprod(WA, WA)
    }
    if (analysis == "collaboration") {
        switch(network, authors = {
            WA <- cocMatrix(M, Field = "AU", type = "sparse", 
                n, sep, short = short)
        }, universities = {
            WA <- cocMatrix(M, Field = "AU_UN", type = "sparse", 
                n, sep, short = short)
        }, countries = {
            WA <- cocMatrix(M, Field = "AU_CO", type = "sparse", 
                n, sep, short = short)
                # not clear where they take the field from (but maybe because I don’t know R well) 
                # but if it’s the same as in biblioAnalysis then it’s not clear at all why in this analysis we have HK 
                # and in other country-based analysis we don’t

        })
        NetMatrix <- crossprod(WA, WA)
    }
    NetMatrix <- NetMatrix[nchar(colnames(NetMatrix)) != 0, nchar(colnames(NetMatrix)) != 
        0]
    if (network == "references") {
        ind <- which(regexpr("[A-Za-z]", substr(colnames(NetMatrix), 
            1, 1)) == 1)
        NetMatrix <- NetMatrix[ind, ind]
        if (isTRUE(shortlabel)) {
            LABEL <- labelShort(NetMatrix, db = tolower(M$DB[1]))
            LABEL <- removeDuplicatedlabels(LABEL)
            colnames(NetMatrix) <- rownames(NetMatrix) <- LABEL
        }
    }
    return(NetMatrix)
}
